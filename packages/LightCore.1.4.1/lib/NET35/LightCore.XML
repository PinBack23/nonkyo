<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LightCore</name>
    </assembly>
    <members>
        <member name="T:LightCore.Activation.ResolutionContext">
            <summary>
            Represents a context for resolving instances
            with most used arguments.
            </summary>
        </member>
        <member name="M:LightCore.Activation.ResolutionContext.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:LightCore.Activation.ResolutionContext"/>.
            </summary>
        </member>
        <member name="M:LightCore.Activation.ResolutionContext.#ctor(LightCore.IContainer,LightCore.Registration.IRegistrationContainer)">
            <summary>
            Initializes a new instance of <see cref="T:LightCore.Activation.ResolutionContext"/>.
            <param name="container">The container.</param>
            <param name="registrations">The registrations.</param>
            </summary>
        </member>
        <member name="M:LightCore.Activation.ResolutionContext.#ctor(LightCore.IContainer,LightCore.Registration.IRegistrationContainer,LightCore.Registration.ArgumentContainer,LightCore.Registration.ArgumentContainer)">
            <summary>
            Initializes a new instance of <see cref="T:LightCore.Activation.ResolutionContext"/>.
            <param name="container">The container.</param>
            <param name="registrations">The registrations.</param>
            <param name="arguments">The arguments.</param>
            <param name="runtimeArguments">The runtime arguments.</param>
            </summary>
        </member>
        <member name="P:LightCore.Activation.ResolutionContext.Container">
            <summary>
            Gets or sets the container.
            </summary>
        </member>
        <member name="P:LightCore.Activation.ResolutionContext.Registration">
            <summary>
            Gets or sets the registration.
            </summary>
        </member>
        <member name="P:LightCore.Activation.ResolutionContext.RegistrationContainer">
            <summary>
            Gets or sets the registrations.
            </summary>
        </member>
        <member name="P:LightCore.Activation.ResolutionContext.Arguments">
            <summary>
            Gets or sets the arguments.
            </summary>
        </member>
        <member name="P:LightCore.Activation.ResolutionContext.RuntimeArguments">
            <summary>
            Gets or sets the runtime arguments.
            </summary>
        </member>
        <member name="T:LightCore.Activation.Components.ArgumentCollector">
            <summary>
            Represents a collector for arguments.
            </summary>
        </member>
        <member name="M:LightCore.Activation.Components.IArgumentCollector.CollectArguments(System.Func{System.Type,System.Object},System.Reflection.ParameterInfo[],LightCore.Activation.ResolutionContext)">
            <summary>
            Collect the arguments from given parameter types.
            </summary>
            <param name="dependencyResolver">The depenency resolver.</param>
            <param name="parameters">The parameters.</param>
            <param name="resolutionContext">The resolution context.</param>
            <returns>The collected arguments.</returns>
        </member>
        <member name="M:LightCore.Activation.Components.ArgumentCollector.CollectArguments(System.Func{System.Type,System.Object},System.Reflection.ParameterInfo[],LightCore.Activation.ResolutionContext)">
            <summary>
            Collect the arguments from given parameter types.
            </summary>
            <param name="dependencyResolver">The depenency resolver.</param>
            <param name="parameters">The parameters.</param>
            <param name="resolutionContext">The resolution context.</param>
            <returns>The collected arguments.</returns>
        </member>
        <member name="T:LightCore.Activation.Components.ConstructorSelector">
            <summary>
            Represents the constructor search stratetgy.
            </summary>
        </member>
        <member name="M:LightCore.Activation.Components.IConstructorSelector.SelectConstructor(System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo},LightCore.Activation.ResolutionContext)">
            <summary>
            Selects the right constructor for current context.
            </summary>
            <param name="constructors">The constructors.</param>
            <param name="resolutionContext">The resolution context.</param>
            <returns>The selected constructor.</returns>
        </member>
        <member name="M:LightCore.Activation.Components.ConstructorSelector.SelectConstructor(System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo},LightCore.Activation.ResolutionContext)">
            <summary>
            Selects the right constructor for current context.
            </summary>
            <param name="constructors">The constructors.</param>
            <param name="resolutionContext">The resolution context.</param>
            <returns>The selected constructor.</returns>
        </member>
        <member name="T:LightCore.Activation.Activators.DelegateActivator">
            <summary>
            Represents a delegate instance activator.
            </summary>
        </member>
        <member name="T:LightCore.Activation.Activators.IActivator">
            <summary>
            Represents an instance activator.
            </summary>
        </member>
        <member name="M:LightCore.Activation.Activators.IActivator.ActivateInstance(LightCore.Activation.ResolutionContext)">
            <summary>
            Activates an instance with given arguments.
            </summary>
            <param name="resolutionContext">The resolution context.</param>
            <returns>The activated instance.</returns>
        </member>
        <member name="F:LightCore.Activation.Activators.DelegateActivator._activationFunction">
            <summary>
            The activation function as a delegate.
            </summary>
        </member>
        <member name="M:LightCore.Activation.Activators.DelegateActivator.#ctor(System.Func{LightCore.IContainer,System.Object})">
            <summary>
            Initializes a new instance of <see cref="T:LightCore.Activation.Activators.DelegateActivator"/>.
            </summary>
            <param name="activationFunction">The activator function.</param>
        </member>
        <member name="M:LightCore.Activation.Activators.DelegateActivator.ActivateInstance(LightCore.Activation.ResolutionContext)">
            <summary>
            Activates an instance with given arguments.
            </summary>
            <param name="resolutionContext">The resolutionContext.</param>
            <returns>The activated instance.</returns>
        </member>
        <member name="T:LightCore.Activation.Activators.InstanceActivator`1">
            <summary>
            Represents a activator based on a instance.
            This is always singleton per container.
            </summary>
        </member>
        <member name="F:LightCore.Activation.Activators.InstanceActivator`1._instance">
            <summary>
            Holds the instance.
            </summary>
        </member>
        <member name="M:LightCore.Activation.Activators.InstanceActivator`1.#ctor(`0)">
            <summary>
            Initializes a new instance of <see cref="T:LightCore.Activation.Activators.InstanceActivator`1"/>.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:LightCore.Activation.Activators.InstanceActivator`1.ActivateInstance(LightCore.Activation.ResolutionContext)">
            <summary>
            Activates an instance with given arguments.
            </summary>
            <param name="resolutionContext">The resolutionContext.</param>
            <returns>The activated instance.</returns>
        </member>
        <member name="T:LightCore.Activation.Activators.ReflectionActivator">
            <summary>
            Represents an reflection instance activator.
            </summary>
        </member>
        <member name="F:LightCore.Activation.Activators.ReflectionActivator._container">
            <summary>
            The container.
            </summary>
        </member>
        <member name="F:LightCore.Activation.Activators.ReflectionActivator._constructorSelector">
            <summary>
            The constructor selector.
            </summary>
        </member>
        <member name="F:LightCore.Activation.Activators.ReflectionActivator._argumentCollector">
            <summary>
            The argument collector.
            </summary>
        </member>
        <member name="F:LightCore.Activation.Activators.ReflectionActivator._cachedConstructor">
            <summary>
            The cached constructor.
            </summary>
        </member>
        <member name="F:LightCore.Activation.Activators.ReflectionActivator._cachedArguments">
            <summary>
            The cached arguments.
            </summary>
        </member>
        <member name="F:LightCore.Activation.Activators.ReflectionActivator._implementationType">
            <summary>
            The implementation type.
            </summary>
        </member>
        <member name="M:LightCore.Activation.Activators.ReflectionActivator.#ctor(System.Type,LightCore.Activation.Components.IConstructorSelector,LightCore.Activation.Components.IArgumentCollector)">
            <summary>
             Creates a new instance of <see cref="T:LightCore.Activation.Activators.ReflectionActivator"/>.
            </summary>
            <param name="implementationType">The implementation type.</param>
            <param name="constructorSelector">The constructor selector.</param>
            <param name="argumentCollector">The argument collector.</param>
        </member>
        <member name="M:LightCore.Activation.Activators.ReflectionActivator.ActivateInstance(LightCore.Activation.ResolutionContext)">
            <summary>
            Activates an instance with given arguments.
            </summary>
            <param name="resolutionContext">The container.</param>
            <returns>The activated instance.</returns>
        </member>
        <member name="M:LightCore.Activation.Activators.ReflectionActivator.GetAnyDependencyParameter(LightCore.Activation.ResolutionContext)">
            <summary>
            Gets <value>true</value> if a dependency parameter exists, otherwise <value>false</value>.
            </summary>
            <param name="resolutionContext">The resolution context.</param>
            <returns><value>true</value> if a dependency parameter exists, otherwise <value>false</value>.</returns>
        </member>
        <member name="T:LightCore.ExtensionMethods.LightCore.Fluent.FluentRegistrationExtensions">
            <summary>
            Represents extensionmethods for LightCore.Fluent namespace.
            </summary>
        </member>
        <member name="M:LightCore.ExtensionMethods.LightCore.Fluent.FluentRegistrationExtensions.StirbLangsamMit``1(LightCore.Fluent.IFluentRegistration)">
            <summary>
            Treat the current registration to use the passed lifecycle.
            </summary>
            <typeparam name="TLifecycle">The lifecycle type.</typeparam>
            <param name="source">The source.</param>
            <returns>The instance itself to get fluent working.</returns>
        </member>
        <member name="M:LightCore.ExtensionMethods.LightCore.Fluent.FluentRegistrationExtensions.DieSlowlyWithin``1(LightCore.Fluent.IFluentRegistration)">
            <summary>
            Treat the current registration to use the passed lifecycle.
            </summary>
            <typeparam name="TLifecycle">The lifecycle type.</typeparam>
            <param name="source">The source.</param>
            <returns>The instance itself to get fluent working.</returns>
        </member>
        <member name="T:LightCore.ContractNotImplementedByTypeException">
            <summary>
            Thrown when the contract type is not assignable from implementationtype.
            </summary>
        </member>
        <member name="M:LightCore.ContractNotImplementedByTypeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LightCore.ContractNotImplementedByTypeException"/> type.
            </summary>
        </member>
        <member name="M:LightCore.ContractNotImplementedByTypeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LightCore.ContractNotImplementedByTypeException"/> type.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:LightCore.ContractNotImplementedByTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LightCore.ContractNotImplementedByTypeException"/> type.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:LightCore.ContractNotImplementedByTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LightCore.ContractNotImplementedByTypeException"/> type.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:LightCore.ExtensionMethods.System.ObjectExtensions">
            <summary>
            Represents extensionmethods for <see cref="T:System.Object"/> type.
            </summary>
        </member>
        <member name="M:LightCore.ExtensionMethods.System.ObjectExtensions.ToNamedArgumentDictionary(System.Object)">
            <summary>
            Converts a anonymous type to a dictionary{string, object}.
            </summary>
            <param name="source">The source.</param>
            <returns>A dictionary that holds the name / values of the passed object.</returns>
        </member>
        <member name="T:LightCore.ExtensionMethods.System.SystemExtensions">
            <summary>
            Represents extensionmethods for <see cref="T:System.Type"/> type.
            </summary>
        </member>
        <member name="M:LightCore.ExtensionMethods.System.SystemExtensions.IsConcreteType(System.Type)">
            <summary>
            Checks whether the type is concrete or not.
            </summary>
            <param name="source">The type to check.</param>
            <returns><value>true</value> if the type is concrete, otherwise <value>false</value>.</returns>
        </member>
        <member name="M:LightCore.ExtensionMethods.System.SystemExtensions.IsFactoryType(System.Type)">
            <summary>
            Checks whether the type is a generic factory or not.
            </summary>
            <param name="source">The type to check.</param>
            <returns><value>true</value> if the type is a generic factory, otherwise <value>false</value>.</returns>
        </member>
        <member name="M:LightCore.ExtensionMethods.System.SystemExtensions.IsGenericEnumerable(System.Type)">
            <summary>
            Checks whether a given type is type of generic enumerable.
            </summary>
            <param name="source">The source type.</param>
            <returns><true /> if the parameter type is a generic enumerable, otherwise <false /></returns>
        </member>
        <member name="T:LightCore.InvalidRegistrationException">
            <summary>
            Thrown when a registration is invalid. e.g. Registration of interface to interface.
            </summary>
        </member>
        <member name="M:LightCore.InvalidRegistrationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LightCore.InvalidRegistrationException"/> type.
            </summary>
        </member>
        <member name="M:LightCore.InvalidRegistrationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LightCore.InvalidRegistrationException"/> type.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:LightCore.InvalidRegistrationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LightCore.InvalidRegistrationException"/> type.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:LightCore.InvalidRegistrationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LightCore.InvalidRegistrationException"/> type.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:LightCore.Registration.InlineRegistrationModule">
            <summary>
            Represents an inline registration module.
            </summary>
        </member>
        <member name="T:LightCore.Registration.RegistrationModule">
            <summary>
            Represents an abstract registration module for implementing custom registrations.
            </summary>
        </member>
        <member name="M:LightCore.Registration.RegistrationModule.Register(LightCore.IContainerBuilder)">
            <summary>
            Registers all candidates.
            </summary>
            <param name="containerBuilder">The ContainerBuilder.</param>
        </member>
        <member name="M:LightCore.Registration.InlineRegistrationModule.#ctor(System.Action{LightCore.IContainerBuilder}[])">
            <summary>
            Initializes a new instance of <see cref="T:LightCore.Registration.InlineRegistrationModule"/>.
            </summary>
            <param name="registrationCallbacks">The registration callbacks.</param>
        </member>
        <member name="M:LightCore.Registration.InlineRegistrationModule.Register(LightCore.IContainerBuilder)">
            <summary>
            Registers all candidates.
            </summary>
            <param name="containerBuilder">The ContainerBuilder.</param>
        </member>
        <member name="P:LightCore.Registration.InlineRegistrationModule.RegistrationCallbacks">
            <summary>
            Gets or sets the registration callbacks.
            </summary>
        </member>
        <member name="T:LightCore.Lifecycle.ILifecycle">
            <summary>
            Represents a lifecycle where instances can be reused.
            </summary>
        </member>
        <member name="M:LightCore.Lifecycle.ILifecycle.ReceiveInstanceInLifecycle(System.Func{System.Object})">
            <summary>
            Handle the reuse of instances.
            </summary>
            <param name="newInstanceResolver">The function for lazy get an instance.</param>
        </member>
        <member name="T:LightCore.Lifecycle.SingletonLifecycle">
            <summary>
            Represents a singleton per container lifecycle.
            (One instance is shared within the same container).
            </summary>
        </member>
        <member name="F:LightCore.Lifecycle.SingletonLifecycle._lock">
            <summary>
            Contains the lock object for instance creation.
            </summary>
        </member>
        <member name="F:LightCore.Lifecycle.SingletonLifecycle._instance">
            <summary>
            The instance.
            </summary>
        </member>
        <member name="M:LightCore.Lifecycle.SingletonLifecycle.ReceiveInstanceInLifecycle(System.Func{System.Object})">
            <summary>
            Handle the reuse of instances.
            </summary>
            <param name="newInstanceResolver">The function for lazy get an instance.</param>
        </member>
        <member name="T:LightCore.Lifecycle.ThreadSingletonLifecycle">
            <summary>
            Represents a singleton per thread lifecycle.
            (One instance is shared within one thread).
            </summary>
        </member>
        <member name="F:LightCore.Lifecycle.ThreadSingletonLifecycle._lock">
            <summary>
            Contains the lock object for instance creation.
            </summary>
        </member>
        <member name="F:LightCore.Lifecycle.ThreadSingletonLifecycle._instanceMap">
            <summary>
            Holds an map with instances for different threads.
            </summary>
        </member>
        <member name="M:LightCore.Lifecycle.ThreadSingletonLifecycle.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:LightCore.Lifecycle.ThreadSingletonLifecycle"/>.
            </summary>
        </member>
        <member name="M:LightCore.Lifecycle.ThreadSingletonLifecycle.ReceiveInstanceInLifecycle(System.Func{System.Object})">
            <summary>
            Handle the reuse of instances.
            </summary>
            <param name="newInstanceResolver">The function for lazy get an instance.</param>
        </member>
        <member name="T:LightCore.Lifecycle.TransientLifecycle">
            <summary>
            Represents a lifecycle where instances cannot be reused.
            (Every request gets a new instance).
            </summary>
        </member>
        <member name="M:LightCore.Lifecycle.TransientLifecycle.ReceiveInstanceInLifecycle(System.Func{System.Object})">
            <summary>
            Handle the reuse of instances.
            </summary>
            <param name="newInstanceResolver">The function for lazy get an instance.</param>
        </member>
        <member name="T:LightCore.Registration.ArgumentContainer">
            <summary>
            Represents a container for arguments.
            </summary>
        </member>
        <member name="M:LightCore.Registration.ArgumentContainer.AddToAnonymousArguments(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Adds values to the anonymous arguments.
            </summary>
            <param name="arguments">The anonymous arguments to add.</param>
        </member>
        <member name="M:LightCore.Registration.ArgumentContainer.AddToNamedArguments(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds values to the named arguments.
            </summary>
            <param name="namedArguments">The named arguments to add.</param>
        </member>
        <member name="M:LightCore.Registration.ArgumentContainer.CanSupplyValue(System.Reflection.ParameterInfo)">
            <summary>
            Checks wether the value can be supplied from the arguments or not.
            </summary>
            <param name="parameter">The parameter info.</param>
            <returns>Returns <false /> if the value cannot be supplied from arguments, otherwise <true />.</returns>
        </member>
        <member name="P:LightCore.Registration.ArgumentContainer.AnonymousArguments">
            <summary>
            Contains the anonymous arguments.
            </summary>
        </member>
        <member name="P:LightCore.Registration.ArgumentContainer.NamedArguments">
            <summary>
            Contains the named arguments.
            </summary>
        </member>
        <member name="P:LightCore.Registration.ArgumentContainer.CountOfAllArguments">
            <summary>
            Gets the count of all arguments.
            </summary>
        </member>
        <member name="T:LightCore.Registration.RegistrationContainer">
            <summary>
            Represents an accessor interface for registration containers.
            </summary>
        </member>
        <member name="T:LightCore.Registration.IRegistrationContainer">
            <summary>
            Represents an accessor interface for registration containers.
            </summary>
        </member>
        <member name="M:LightCore.Registration.IRegistrationContainer.IsRegistered(System.Type)">
            <summary>
            Determines whether a contracttype is at any place, registered / supported by the container, or not.
            Searches registrations in all locations.
            </summary>
            <param name="contractType">The type of the contract.</param>
            <returns><value>true</value> if a registration with the contracttype found, or supported. Otherwise <value>false</value>.</returns>
        </member>
        <member name="M:LightCore.Registration.IRegistrationContainer.IsSupportedByRegistrationSource(System.Type)">
            <summary>
            Determines whether a contracttype is supported by registration sources.
            </summary>
            <param name="contractType">The type of the contract.</param>
            <returns><value>true</value> if the type is supported by a registration source, otherwise <value>false</value>.</returns>
        </member>
        <member name="M:LightCore.Registration.IRegistrationContainer.IsSupportedByRegistrationSource(System.Type,LightCore.Registration.RegistrationFilter)">
            <summary>
            Determines whether a contracttype is supported by registration sources.
            </summary>
            <param name="contractType">The type of the contract.</param>
            <param name="registrationFilter">The registration filter.</param>
            <returns><value>true</value> if the type is supported by a registration source, otherwise <value>false</value>.</returns>
        </member>
        <member name="P:LightCore.Registration.IRegistrationContainer.Registrations">
            <summary>
            Containes the unique registrations.
            </summary>
        </member>
        <member name="P:LightCore.Registration.IRegistrationContainer.DuplicateRegistrations">
            <summary>
            Contains the duplicate registrations, e.g. plugins.
            </summary>
        </member>
        <member name="P:LightCore.Registration.IRegistrationContainer.AllRegistrations">
            <summary>
            Contains all registrations.
            </summary>
        </member>
        <member name="P:LightCore.Registration.IRegistrationContainer.RegistrationSources">
            <summary>
            Contains all registration sources.
            </summary>
        </member>
        <member name="F:LightCore.Registration.RegistrationContainer._registeredCache">
            <summary>
            Holds the cache of allready visited types for speed.
            </summary>
        </member>
        <member name="M:LightCore.Registration.RegistrationContainer.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:LightCore.Registration.RegistrationContainer"/>.
            </summary>
        </member>
        <member name="M:LightCore.Registration.RegistrationContainer.IsRegistered(System.Type)">
            <summary>
            Determines whether a contracttype is registered / supported by the container, or not.
             Search on all locations.
            </summary>
            <param name="contractType">The type of the contract.</param>
            <returns><value>true</value> if a registration with the contracttype found, or supported. Otherwise <value>false</value>.</returns>
        </member>
        <member name="M:LightCore.Registration.RegistrationContainer.IsSupportedByRegistrationSource(System.Type)">
            <summary>
            Determines whether a contracttype is supported by registration sources.
            </summary>
            <param name="contractType">The type of the contract.</param>
            <returns><value>true</value> if the type is supported by a registration source, otherwise <value>false</value>.</returns>
        </member>
        <member name="M:LightCore.Registration.RegistrationContainer.IsSupportedByRegistrationSource(System.Type,LightCore.Registration.RegistrationFilter)">
            <summary>
            Determines whether a contracttype is supported by registration sources.
            </summary>
            <param name="contractType">The type of the contract.</param>
            <param name="registrationFilter">Exclude concrete types or not.</param>
            <returns><value>true</value> if the type is supported by a registration source, otherwise <value>false</value>.</returns>
        </member>
        <member name="P:LightCore.Registration.RegistrationContainer.Registrations">
            <summary>
            Containes the unique registrations.
            </summary>
        </member>
        <member name="P:LightCore.Registration.RegistrationContainer.DuplicateRegistrations">
            <summary>
            Contains the duplicate registrations, e.g. plugins.
            </summary>
        </member>
        <member name="P:LightCore.Registration.RegistrationContainer.AllRegistrations">
            <summary>
            Gets all registrations. (Without IRegistrationSource{T}).
            </summary>
        </member>
        <member name="P:LightCore.Registration.RegistrationContainer.RegistrationSources">
            <summary>
            Contains all registration sources.
            </summary>
        </member>
        <member name="T:LightCore.Registration.RegistrationFilter">
            <summary>
             Represents a filter, that indicated whether to filter nothing (None),
             or filter a specific thing, like (ResolveAnything).
            </summary>
        </member>
        <member name="F:LightCore.Registration.RegistrationFilter.None">
            <summary>
             No Filter is set.
            </summary>
        </member>
        <member name="F:LightCore.Registration.RegistrationFilter.SkipResolveAnything">
            <summary>
             Filter ResolveAnything.
            </summary>
        </member>
        <member name="T:LightCore.Container">
            <summary>
            Represents the implementation for an inversion of control container.
            </summary>
        </member>
        <member name="T:LightCore.IContainer">
            <summary>
            Represents the contract for a inversion of control container.
            </summary>
        </member>
        <member name="M:LightCore.IContainer.Resolve``1">
            <summary>
            Resolves a contract (include subcontracts).
            </summary>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <returns>The resolved instance as <typeparamref name="TContract"/>.</returns>
        </member>
        <member name="M:LightCore.IContainer.Resolve``1(System.Object[])">
            <summary>
             Resolves a contract (include subcontracts) with constructor arguments.
            </summary>
            <param name="arguments">The constructor arguments.</param>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <returns>The resolved instance as <typeparamref name="TContract"/></returns>.
        </member>
        <member name="M:LightCore.IContainer.Resolve``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
             Resolves a contract (include subcontracts) with constructor arguments.
            </summary>
            <param name="arguments">The constructor arguments.</param>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <returns>The resolved instance as <typeparamref name="TContract"/></returns>.
        </member>
        <member name="M:LightCore.IContainer.Resolve``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Resolves a contract (include subcontracts) with named constructor arguments.
            </summary>
            <param name="namedArguments">The  named constructor arguments.</param>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <returns>The resolved instance as <typeparamref name="TContract"/></returns>
        </member>
        <member name="M:LightCore.IContainer.Resolve``1(LightCore.AnonymousArgument)">
            <summary>
            Resolves a contract (include subcontracts) with anonymous named constructor arguments.
            </summary>
            <param name="namedArguments">The  named constructor arguments.</param>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <returns>The resolved instance as <typeparamref name="TContract"/></returns>
        </member>
        <member name="M:LightCore.IContainer.Resolve(System.Type)">
            <summary>
            Resolves a contract (include subcontracts).
            </summary>
            <param name="contractType">The contract type.</param>
            <returns>The resolved instance as object.</returns>
        </member>
        <member name="M:LightCore.IContainer.Resolve(System.Type,System.Object[])">
            <summary>
             Resolves a contract (include subcontracts) with constructor arguments.
            </summary>
            <param name="contractType">The contract type.</param>
            <param name="arguments">The constructor arguments.</param>
            <returns>The resolved instance as object.</returns>.
        </member>
        <member name="M:LightCore.IContainer.Resolve(System.Type,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
             Resolves a contract (include subcontracts) with constructor arguments.
            </summary>
            <param name="contractType">The contract type.</param>
            <param name="arguments">The constructor arguments.</param>
            <returns>The resolved instance as object.</returns>.
        </member>
        <member name="M:LightCore.IContainer.Resolve(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Resolves a contract (include subcontract) with named constructor arguments.
            </summary>
            <param name="contractType">The contract type.</param>
            <param name="namedArguments">The named constructor arguments.</param>
            <returns>The resolved instance as object.</returns>
        </member>
        <member name="M:LightCore.IContainer.ResolveAll``1">
            <summary>
            Resolves all contracts of type {TContract}.
            </summary>
            <typeparam name="TContract">The contract type contraining the result.</typeparam>
            <returns>The resolved instances</returns>
        </member>
        <member name="M:LightCore.IContainer.ResolveAll(System.Type)">
            <summary>
            Resolves all contract of type <paramref name="contractType"/>.
            </summary>
            <param name="contractType">The contract type contraining the result.</param>
            <returns>The resolved instances</returns>
        </member>
        <member name="M:LightCore.IContainer.ResolveAll">
            <summary>
            Resolves all contracts.
            </summary>
            <returns>The resolved instances</returns>
        </member>
        <member name="M:LightCore.IContainer.InjectProperties(System.Object)">
            <summary>
            Injects properties to an existing instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="F:LightCore.Container._registrationContainer">
            <summary>
            Holds the registration container.
            </summary>
        </member>
        <member name="M:LightCore.Container.#ctor(LightCore.Registration.IRegistrationContainer)">
            <summary> Initializes a new instance of <see cref="T:LightCore.Container"/>.
            <param name="registrationContainer">The registrations for this container.</param>
            </summary>
        </member>
        <member name="M:LightCore.Container.CreateValidPropertiesSelector">
            <summary>
            Creates the valid properties selector and set it to the container.
            </summary>
        </member>
        <member name="M:LightCore.Container.RegisterContainer">
            <summary>
            Register the container itself for service locator reasons. 
            </summary>
        </member>
        <member name="M:LightCore.Container.Resolve``1">
            <summary>
            Resolves a contract (include subcontracts).
            </summary>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <returns>The resolved instance as <typeparamref name="TContract"/>.</returns>
        </member>
        <member name="M:LightCore.Container.Resolve``1(System.Object[])">
            <summary>
             Resolves a contract (include subcontracts) with constructor arguments.
            </summary>
            <param name="arguments">The constructor arguments.</param>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <returns>The resolved instance as <typeparamref name="TContract"/></returns>.
        </member>
        <member name="M:LightCore.Container.Resolve``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
             Resolves a contract (include subcontracts) with constructor arguments.
            </summary>
            <param name="arguments">The constructor arguments.</param>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <returns>The resolved instance as <typeparamref name="TContract"/></returns>.
        </member>
        <member name="M:LightCore.Container.Resolve``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Resolves a contract (include subcontracts) with named constructor arguments.
            </summary>
            <param name="namedArguments">The  named constructor arguments.</param>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <returns>The resolved instance as <typeparamref name="TContract"/></returns>
        </member>
        <member name="M:LightCore.Container.Resolve``1(LightCore.AnonymousArgument)">
            <summary>
            Resolves a contract (include subcontracts) with anonymous named constructor arguments.
            </summary>
            <param name="namedArguments">The  named constructor arguments.</param>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <returns>The resolved instance as <typeparamref name="TContract"/></returns>
        </member>
        <member name="M:LightCore.Container.Resolve(System.Type)">
            <summary>
            Resolves a contract (include subcontracts).
            </summary>
            <param name="contractType">The contract type.</param>
            <returns>The resolved instance as object.</returns>
        </member>
        <member name="M:LightCore.Container.ResolveInternal(System.Type,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Resolves a contract (include subcontracts).
            </summary>
            <param name="contractType">The contract type.</param>
            <param name="arguments">The arguments.</param>
            <param name="namedArguments">The named arguments.</param>
            <returns>The resolved instance as object.</returns>
        </member>
        <member name="M:LightCore.Container.AddArgumentsToRegistration(LightCore.Registration.RegistrationItem,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Add all arguments to the passed registration.
            </summary>
            <param name="registrationItem">The registration.</param>
            <param name="arguments">The arguments.</param>
            <param name="namedArguments">The named arguments.</param>
        </member>
        <member name="M:LightCore.Container.Resolve(System.Type,System.Object[])">
            <summary>
             Resolves a contract (include subcontracts) with constructor arguments.
            </summary>
            <param name="contractType">The contract type.</param>
            <param name="arguments">The constructor arguments.</param>
            <returns>The resolved instance as object.</returns>.
        </member>
        <member name="M:LightCore.Container.Resolve(System.Type,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
             Resolves a contract (include subcontracts) with constructor arguments.
            </summary>
            <param name="contractType">The contract type.</param>
            <param name="arguments">The constructor arguments.</param>
            <returns>The resolved instance as object.</returns>.
        </member>
        <member name="M:LightCore.Container.Resolve(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Resolves a contract (include subcontract) with named constructor arguments.
            </summary>
            <param name="contractType">The contract type.</param>
            <param name="namedArguments">The named constructor arguments.</param>
            <returns>The resolved instance as object.</returns>
        </member>
        <member name="M:LightCore.Container.Resolve(LightCore.Registration.RegistrationItem)">
            <summary>
            Resolves a dependency internally with a registrationItem.
            </summary>
            <param name="registrationItem">The registrationItem to activate.</param>
            <returns>The resolved instance.</returns>
        </member>
        <member name="M:LightCore.Container.ResolveAll``1">
            <summary>
            Resolves all contracts of type {TContract}.
            </summary>
            <typeparam name="TContract">The contract type contraining the result.</typeparam>
            <returns>The resolved instances</returns>
        </member>
        <member name="M:LightCore.Container.ResolveAll">
            <summary>
            Resolves all contracts.
            </summary>
            <returns>The resolved instances</returns>
        </member>
        <member name="M:LightCore.Container.ResolveAll(System.Type)">
            <summary>
            Resolves all contract of type <paramref name="contractType"/>.
            </summary>
            <param name="contractType">The contract type contraining the result.</param>
            <returns>The resolved instances</returns>
        </member>
        <member name="M:LightCore.Container.InjectProperties(System.Object)">
            <summary>
            Injects properties to an existing instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="T:LightCore.ContainerBuilder">
            <summary>
            Represents a builder that is reponsible for accepting, validating registrations
            and builds the container with that registrations.
            </summary>
        </member>
        <member name="T:LightCore.IContainerBuilder">
            <summary>
            Represents a builder that is reponsible for accepting, validating registrations
            and builds the container with that registrations.
            </summary>
        </member>
        <member name="M:LightCore.IContainerBuilder.Build">
            <summary>
            Builds the container.
            </summary>
            <returns>The builded container.</returns>
        </member>
        <member name="M:LightCore.IContainerBuilder.RegisterModule(LightCore.Registration.RegistrationModule)">
            <summary>
            Registers a module with registrations.
            </summary>
            <param name="registrationModule">The module to register within this container builder.</param>
        </member>
        <member name="M:LightCore.IContainerBuilder.DefaultControlledBy``1">
            <summary>
            Sets the default lifecycle for this container. (e.g. SingletonLifecycle, TrainsientLifecycle, ...).
            </summary>
            <typeparam name="TLifecycle">The default lifecycle.</typeparam>
        </member>
        <member name="M:LightCore.IContainerBuilder.DefaultControlledBy(System.Func{LightCore.Lifecycle.ILifecycle})">
            <summary>
            Sets the default lifecycle function for this container. (e.g. SingletonLifecycle, TrainsientLifecycle, ...).
            </summary>
            <param name="lifecycleFunction">The creator function for default lifecycle.</param>
        </member>
        <member name="M:LightCore.IContainerBuilder.Register``1">
            <summary>
            Registers a type to itself.
            </summary>
            <typeparam name="TSelf">The type.</typeparam>
            <returns>An instance of <see cref="T:LightCore.Fluent.IFluentRegistration"/> that exposes fluent registration.</returns>
        </member>
        <member name="M:LightCore.IContainerBuilder.Register``1(``0)">
            <summary>
            Registers a instance for usage.
            </summary>
            <typeparam name="TInstance">The type of the instance.</typeparam>
            <param name="instance">The instance to register.</param>
            <returns>An instance of <see cref="T:LightCore.Fluent.IFluentRegistration"/> that exposes a fluent interface for registration configuration.</returns>
        </member>
        <member name="M:LightCore.IContainerBuilder.Register``1(System.Func{LightCore.IContainer,``0})">
            <summary>
            Registers a contract with an activator function.
            </summary>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <param name="activatorFunction">The activator as function..</param>
            <returns>An instance of <see cref="T:LightCore.Fluent.IFluentRegistration"/> that exposes a fluent interface for registration configuration.</returns>
        </member>
        <member name="M:LightCore.IContainerBuilder.Register``2">
            <summary>
            Registers a contract with its implementationtype.
            </summary>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <typeparam name="TImplementation">The type of the implementation for the contract</typeparam>
            <returns>An instance of <see cref="T:LightCore.Fluent.IFluentRegistration"/> that exposes a fluent interface for registration configuration.</returns>
        </member>
        <member name="M:LightCore.IContainerBuilder.Register(System.Type,System.Type)">
            <summary>
            Registers a contract with its implementationtype.
            </summary>
            <param name="typeOfContract">The type of the contract.</param>
            <param name="typeOfImplementation">The type of the implementation for the contract</param>
            <returns>An instance of <see cref="T:LightCore.Fluent.IFluentRegistration"/> that exposes a fluent interface for registration configuration.</returns>
        </member>
        <member name="P:LightCore.IContainerBuilder.ActiveRegistrationGroups">
            <summary>
            Gets or sets the active group configurations.
            </summary>
        </member>
        <member name="F:LightCore.ContainerBuilder._activeRegistrationGroups">
            <summary>
            Contains the active registration groups as comma separated string.
            </summary>
        </member>
        <member name="F:LightCore.ContainerBuilder._activeRegistrationGroupsInternal">
            <summary>
            Contains the active registration groups as array for internal use.
            </summary>
        </member>
        <member name="F:LightCore.ContainerBuilder._bootStrappingContainer">
            <summary>
            Holds a container for bootstrapping LightCore.
            </summary>
        </member>
        <member name="F:LightCore.ContainerBuilder._registrationContainer">
            <summary>
            Holds a container with registrations to register.
            </summary>
        </member>
        <member name="F:LightCore.ContainerBuilder._registrationCallbacks">
            <summary>
            Holds a list with registering callbacks.
            </summary>
        </member>
        <member name="F:LightCore.ContainerBuilder._defaultLifecycleFunction">
            <summary>
            Holds the default lifecycle function.
            </summary>
        </member>
        <member name="M:LightCore.ContainerBuilder.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:LightCore.ContainerBuilder"/>.
            </summary>
        </member>
        <member name="M:LightCore.ContainerBuilder.Build">
            <summary>
            Builds the container.
            </summary>
            <returns>The builded container.</returns>
        </member>
        <member name="M:LightCore.ContainerBuilder.RegisterModule(LightCore.Registration.RegistrationModule)">
            <summary>
            Registers a module with registrations.
            </summary>
            <param name="registrationModule">The module to register within this container builder.</param>
        </member>
        <member name="M:LightCore.ContainerBuilder.DefaultControlledBy``1">
            <summary>
            Sets the default lifecycle for this container. (e.g. SingletonLifecycle, TrainsientLifecycle, ...).
            </summary>
            <typeparam name="TLifecycle">The default lifecycle.</typeparam>
        </member>
        <member name="M:LightCore.ContainerBuilder.DefaultControlledBy(System.Func{LightCore.Lifecycle.ILifecycle})">
            <summary>
            Sets the default lifecycle function for this container. (e.g. SingletonLifecycle, TrainsientLifecycle, ...).
            </summary>
            <param name="lifecycleFunction">The creator function for default lifecycle.</param>
        </member>
        <member name="M:LightCore.ContainerBuilder.Register``1">
            <summary>
            Registers a type to itself.
            </summary>
            <typeparam name="TSelf">The type.</typeparam>
            <returns>An instance of <see cref="T:LightCore.Fluent.IFluentRegistration"/> that exposes fluent registration.</returns>
        </member>
        <member name="M:LightCore.ContainerBuilder.Register``1(``0)">
            <summary>
            Registers a type an instance.
            </summary>
            <typeparam name="TInstance">The instance type.</typeparam>
            <returns>An instance of <see cref="T:LightCore.Fluent.IFluentRegistration"/> that exposes fluent registration.</returns>
        </member>
        <member name="M:LightCore.ContainerBuilder.Register``1(System.Func{LightCore.IContainer,``0})">
            <summary>
            Registers a contract with an activator function.
            </summary>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <param name="activatorFunction">The activator as function..</param>
            <returns>An instance of <see cref="T:LightCore.Fluent.IFluentRegistration"/> that exposes a fluent interface for registration configuration.</returns>
        </member>
        <member name="M:LightCore.ContainerBuilder.AddToRegistrationFluent(LightCore.Registration.RegistrationItem)">
            <summary>
            Add a registrationItem to the registrations.
            </summary>
            <param name="registrationItem">The registration to add.</param>
        </member>
        <member name="M:LightCore.ContainerBuilder.Register``2">
            <summary>
            Registers a contract with its implementationtype.
            
             Can be a generic contract (open generic types) with its implementationtype.
            e.g. builder.RegisterGeneric(typeof(IRepository{T}), typeof(Repository{T}));
            container.Resolve{IRepository{Foo}}();
            </summary>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <typeparam name="TImplementation">The type of the implementation for the contract</typeparam>
            <returns>An instance of <see cref="T:LightCore.Fluent.IFluentRegistration"/> that exposes a fluent interface for registration configuration.</returns>
        </member>
        <member name="M:LightCore.ContainerBuilder.Register(System.Type,System.Type)">
            <summary>
            Registers a contract with its implementationtype.
            </summary>
            <param name="typeOfContract">The type of the contract.</param>
            <param name="typeOfImplementation">The type of the implementation for the contract</param>
            <returns>An instance of <see cref="T:LightCore.Fluent.IFluentRegistration"/> that exposes a fluent interface for registration configuration.</returns>
        </member>
        <member name="P:LightCore.ContainerBuilder.ActiveRegistrationGroups">
            <summary>
            Gets or sets the active group configurations.
            </summary>
        </member>
        <member name="T:LightCore.ResolutionFailedException">
            <summary>
             Thrown when resolving of a type failed.
            </summary>
        </member>
        <member name="M:LightCore.ResolutionFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LightCore.ResolutionFailedException"/> type.
            </summary>
        </member>
        <member name="M:LightCore.ResolutionFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LightCore.ResolutionFailedException"/> type.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:LightCore.ResolutionFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LightCore.ResolutionFailedException"/> type.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:LightCore.ResolutionFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LightCore.ResolutionFailedException"/> type.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:LightCore.ExtensionMethods.System.Collections.Generic.CollectionsGenericExtensions">
            <summary>
            Represents extensionmethods for System.Collection.Generic namespace.
            </summary>
        </member>
        <member name="M:LightCore.ExtensionMethods.System.Collections.Generic.CollectionsGenericExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes an action for each item in the enumeration.
            </summary>
            <typeparam name="T">The type of an item.</typeparam>
            <param name="source">The source.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:LightCore.ExtensionMethods.System.Collections.Generic.CollectionsGenericExtensions.Merge``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Merges two dictionaries together.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="source">The source dictionary.</param>
            <param name="dictionaryToMerge">The dictionary to merge with.</param>
            <returns>A new dictionary which represents the merged result of <paramref name="source"/> and <paramref name="dictionaryToMerge"/>.</returns>
        </member>
        <member name="T:LightCore.ExtensionMethods.System.StringExtensions">
            <summary>
            Represents extensionmethods for <see cref="T:System.String"/> type.
            </summary>
        </member>
        <member name="M:LightCore.ExtensionMethods.System.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            Formats a string with given arguments.
            </summary>
            <param name="source">The format string.</param>
            <param name="values">The values.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:LightCore.ExtensionMethods.System.StringExtensions.ToOrDefault(System.String,System.Type)">
            <summary>
            Converts the source string to specified type. If a conversion is not possible or fails, the
            specified default value is used.
            </summary>
            <param name="value">The source string.</param>
            <param name="typeToConvert">The type to convert to.</param>
            <returns>An instance of the specified type.</returns>
        </member>
        <member name="T:LightCore.Fluent.FluentRegistration">
            <summary>
            Represents the fluent interface for registration.
            </summary>
        </member>
        <member name="T:LightCore.Fluent.IFluentRegistration">
            <summary>
            Represents the fluent interface for the registration.
            </summary>
        </member>
        <member name="T:LightCore.Fluent.IFluentInterface">
            <summary>
            Helper interface used to hide the base <see cref="T:System.Object"/> 
            members from the fluent API to make for much cleaner 
            Visual Studio intellisense experience.
            </summary>
        </member>
        <member name="M:LightCore.Fluent.IFluentInterface.GetType">
            <summary/>
        </member>
        <member name="M:LightCore.Fluent.IFluentInterface.GetHashCode">
            <summary/>
        </member>
        <member name="M:LightCore.Fluent.IFluentInterface.ToString">
            <summary/>
        </member>
        <member name="M:LightCore.Fluent.IFluentInterface.Equals(System.Object)">
            <summary/>
        </member>
        <member name="M:LightCore.Fluent.IFluentRegistration.ControlledBy``1">
            <summary>
            Treat the current registration to use the passed lifecycle. (e.g. SingletonLifecycle, TrainsientLifecycle, ...).
            </summary>
            <typeparam name="TLifecycle">The lifecycle type.</typeparam>
            <returns>The instance itself to get fluent working.</returns>
        </member>
        <member name="M:LightCore.Fluent.IFluentRegistration.ControlledBy(System.Type)">
            <summary>
            Treat the current registration to use the passed lifecycle. (e.g. SingletonLifecycle, TrainsientLifecycle, ...).
            </summary>
            <param name="type">The lifecycle type.</param>
            <returns>The instance itself to get fluent working.</returns>
        </member>
        <member name="M:LightCore.Fluent.IFluentRegistration.WithArguments(System.Object[])">
            <summary>
            Adds arguments to the registration.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns>The instance itself to get fluent working.</returns>
        </member>
        <member name="M:LightCore.Fluent.IFluentRegistration.WithNamedArguments(System.Object)">
            <summary>
            Adds named arguments with an anonymous type to the registration.
            </summary>
            <param name="namedArguments">The arguments as anonymous type, e.g. new { arg1 = "test" }.</param>
            <returns>The instance itself to get fluent working.</returns>
        </member>
        <member name="M:LightCore.Fluent.IFluentRegistration.WithNamedArguments(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds named arguments to the registration.
            </summary>
            <param name="namedArguments">The arguments.</param>
            <returns>The instance itself to get fluent working.</returns>
        </member>
        <member name="M:LightCore.Fluent.IFluentRegistration.WithGroup(System.String)">
            <summary>
            Gives a group association to the registration.
            </summary>
            <param name="group">The registration name.</param>
            <returns>The instance itself to get fluent working.</returns>
        </member>
        <member name="F:LightCore.Fluent.FluentRegistration._registrationItem">
            <summary>
            The current registration.
            </summary>
        </member>
        <member name="M:LightCore.Fluent.FluentRegistration.#ctor(LightCore.Registration.RegistrationItem)">
            <summary>
            Initializes a new instance of <see cref="T:LightCore.Fluent.FluentRegistration"/> type.
            </summary>
            <param name="registrationItem">The current mapping item.</param>
        </member>
        <member name="M:LightCore.Fluent.FluentRegistration.ControlledBy``1">
            <summary>
            Treat the current registration to use the passed lifecycle. (e.g. SingletonLifecycle, TrainsientLifecycle, ...).
            </summary>
            <typeparam name="TLifecycle">The lifecycle type.</typeparam>
            <returns>The instance itself to get fluent working.</returns>
        </member>
        <member name="M:LightCore.Fluent.FluentRegistration.ControlledBy(System.Type)">
            <summary>
            Treat the current registration to use the passed lifecycle. (e.g. SingletonLifecycle, TrainsientLifecycle, ...).
            </summary>
            <param name="type">The lifecycle type.</param>
            <returns>The instance itself to get fluent working.</returns>
        </member>
        <member name="M:LightCore.Fluent.FluentRegistration.WithArguments(System.Object[])">
            <summary>
            Adds arguments to the registration.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns>The instance itself to get fluent working.</returns>
        </member>
        <member name="M:LightCore.Fluent.FluentRegistration.WithNamedArguments(System.Object)">
            <summary>
            Adds named arguments to the registration.
            </summary>
            <param name="namedArguments">The arguments as anonymous type, e.g. new { arg1 = "test" }.</param>
            <returns>The instance itself to get fluent working.</returns>
        </member>
        <member name="M:LightCore.Fluent.FluentRegistration.WithNamedArguments(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds named arguments to the registration.
            </summary>
            <param name="namedArguments">The arguments.</param>
            <returns>The instance itself to get fluent working.</returns>
        </member>
        <member name="M:LightCore.Fluent.FluentRegistration.WithGroup(System.String)">
            <summary>
            Gives a group association to the registration.
            </summary>
            <param name="group">The registration name.</param>
            <returns>The instance itself to get fluent working.</returns>
        </member>
        <member name="M:LightCore.Fluent.FluentRegistration.LightCore#Fluent#IFluentInterface#GetType">
            <summary>
            Represents the fluent interface for registration.
            </summary>
        </member>
        <member name="T:LightCore.RegistrationNotFoundException">
            <summary>
            Thrown when a mapping not found for resolving a type.
            </summary>
        </member>
        <member name="M:LightCore.RegistrationNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LightCore.RegistrationNotFoundException"/> type.
            </summary>
        </member>
        <member name="M:LightCore.RegistrationNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LightCore.RegistrationNotFoundException"/> type.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:LightCore.RegistrationNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LightCore.RegistrationNotFoundException"/> type.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:LightCore.RegistrationNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LightCore.RegistrationNotFoundException"/> type.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:LightCore.Registration.RegistrationItem">
            <summary>
            Represents a registration.
            </summary>
        </member>
        <member name="M:LightCore.Registration.RegistrationItem.#ctor">
            <summary>
            Creates a new instance of <see cref="T:LightCore.Registration.RegistrationItem"/>.
            </summary>
        </member>
        <member name="M:LightCore.Registration.RegistrationItem.#ctor(System.Type)">
            <summary>
            Creates a new instance of <see cref="T:LightCore.Registration.RegistrationItem"/>.
            </summary>
            <param name="contractType">The contract type as <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:LightCore.Registration.RegistrationItem.ActivateInstance(LightCore.Activation.ResolutionContext)">
            <summary>
            Activates the current registration.
            </summary>
            <param name="resolutionContext">The resolution context (e.g. for resolve inner depenencies).</param>
            <returns>The activated instance.</returns>
        </member>
        <member name="P:LightCore.Registration.RegistrationItem.ContractType">
            <summary>
            Gets the key for this registration.
            </summary>
        </member>
        <member name="P:LightCore.Registration.RegistrationItem.Group">
            <summary>
            The group.
            TODO: Use....
            </summary>
        </member>
        <member name="P:LightCore.Registration.RegistrationItem.ImplementationType">
            <summary>
            Gets or sets the implementation type for this registration.
            </summary>
        </member>
        <member name="P:LightCore.Registration.RegistrationItem.Activator">
            <summary>
            Gets or sets the activator.
            </summary>
        </member>
        <member name="P:LightCore.Registration.RegistrationItem.Lifecycle">
            <summary>
            Gets or sets the scope that holds the reuse strategy.
            </summary>
        </member>
        <member name="P:LightCore.Registration.RegistrationItem.Arguments">
            <summary>
            Gets or sets the arguments for object creations.
            </summary>
        </member>
        <member name="P:LightCore.Registration.RegistrationItem.RuntimeArguments">
            <summary>
            Gets or sets the runtime arguments for object creations.
            </summary>
        </member>
        <member name="T:LightCore.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:LightCore.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:LightCore.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:LightCore.Properties.Resources.ContractNotImplementedByTypeFormat">
            <summary>
              Looks up a localized string similar to Contract &apos;{0}&apos; is not implemented by type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:LightCore.Properties.Resources.InvalidRegistrationFormat">
            <summary>
              Looks up a localized string similar to Registration to self failed, type &apos;{0}&apos; seems to be not concrete..
            </summary>
        </member>
        <member name="P:LightCore.Properties.Resources.NoConstructorAvailableForType">
            <summary>
              Looks up a localized string similar to No constructor available for type &apos;{0}&apos;. Please add a public constructor..
            </summary>
        </member>
        <member name="P:LightCore.Properties.Resources.NoSuitableConstructorFoundFormat">
            <summary>
              Looks up a localized string similar to No suitable constructor for implementation &apos;{0}&apos; found. Check registered dependencies and availability of default constructors..
            </summary>
        </member>
        <member name="P:LightCore.Properties.Resources.PassedTypeDoesNotImplementILifecycleFormat">
            <summary>
              Looks up a localized string similar to Passed type &apos;{0}&apos; does not implement the interface &quot;ILifecycle&quot;..
            </summary>
        </member>
        <member name="P:LightCore.Properties.Resources.RegistrationNotFoundFormat">
            <summary>
              Looks up a localized string similar to Registration for contract &apos;{0}&apos; not found, please check your registrations..
            </summary>
        </member>
        <member name="T:LightCore.AnonymousArgument">
            <summary>
             Represents an anonymous argument,
             for registering named arguments.
            </summary>
        </member>
        <member name="M:LightCore.AnonymousArgument.#ctor(System.Object)">
            <summary>
             Initializes a new instance of <see cref="T:LightCore.AnonymousArgument"/>.
            </summary>
            <param name="anonymousNamedArguments">The anonymous type, e.g. new { arg1 = true, arg2 = "Peter" }.</param>
        </member>
        <member name="P:LightCore.AnonymousArgument.AnonymousType">
            <summary>
             The anonymous type.
             
             e.g. new { arg1 = true, arg2 = "Peter" }.
            </summary>
        </member>
        <member name="T:LightCore.Registration.RegistrationSource.ArrayRegistrationSource">
            <summary>
            Represents a registration source for TContract[], (ResolveAll as dependency) support.
            
            <example>
            public Foo(IBar[] bar) {  }
            </example>
            </summary>
        </member>
        <member name="T:LightCore.Registration.RegistrationSource.IRegistrationSource">
            <summary>
            Represents a contract for dynamically add registrations, e.g. for generic or lazy support.
            </summary>
        </member>
        <member name="M:LightCore.Registration.RegistrationSource.IRegistrationSource.GetRegistrationFor(System.Type,LightCore.IContainer)">
            <summary>
            Gets a registration for some contract type.
            </summary>
            <param name="contractType">The contract type.</param>
            <param name="container">The container.</param>
            <returns><value>The registration item</value> if this source can handle it, otherwise <value>null</value>.</returns>
        </member>
        <member name="P:LightCore.Registration.RegistrationSource.IRegistrationSource.SourceSupportsTypeSelector">
            <summary>
            Gets whether the registration source supports a type or not.
            </summary>
        </member>
        <member name="F:LightCore.Registration.RegistrationSource.ArrayRegistrationSource._registrationContainer">
            <summary>
            The regisration container.
            </summary>
        </member>
        <member name="M:LightCore.Registration.RegistrationSource.ArrayRegistrationSource.#ctor(LightCore.Registration.IRegistrationContainer)">
            <summary>
            Initializes a new instance of <see cref="T:LightCore.Registration.RegistrationSource.ArrayRegistrationSource"/>.
            </summary>
            <param name="registrationContainer">The registration container.</param>
        </member>
        <member name="M:LightCore.Registration.RegistrationSource.ArrayRegistrationSource.GetRegistrationFor(System.Type,LightCore.IContainer)">
            <summary>
            Gets a registration for some contract type.
            </summary>
            <param name="contractType">The contract type.</param>
            <param name="container">The container.</param>
            <returns><value>The registration item</value> if this source can handle it, otherwise <value>null</value>.</returns>
        </member>
        <member name="M:LightCore.Registration.RegistrationSource.ArrayRegistrationSource.ResolveArray(System.Type,LightCore.IContainer)">
            <summary>
            Resolves an array type.
            </summary>
            <param name="contractType">The contract type.</param>
            <param name="container">The container.</param>
            <returns>A TContract[] instance with all registered instances.</returns>
        </member>
        <member name="T:LightCore.Registration.RegistrationSource.FactoryRegistrationSource">
            <summary>
            Represents an registration source for factory support. (Func{TContract} as dependency).
            It supports also get an parametrized function, for ad-hoc instantiation.
            
            <example>
            public Foo(Func{IBar} bar) {  }
            </example>
            
            <example>
            public Foo(Func{string, IBar} bar) {  }
            </example>
            </summary>
        </member>
        <member name="F:LightCore.Registration.RegistrationSource.FactoryRegistrationSource.ResolveMethodName">
            <summary>
            Holds the name for resolve methods.
            </summary>
        </member>
        <member name="F:LightCore.Registration.RegistrationSource.FactoryRegistrationSource.TypeOfObject">
            <summary>
            Holds the object type.
            </summary>
        </member>
        <member name="F:LightCore.Registration.RegistrationSource.FactoryRegistrationSource.ResolveWithArgumentsMethod">
            <summary>
            Holds the resolve methodinfo with arguments.
            </summary>
        </member>
        <member name="F:LightCore.Registration.RegistrationSource.FactoryRegistrationSource._registrationContainer">
            <summary>
            The regisration container.
            </summary>
        </member>
        <member name="M:LightCore.Registration.RegistrationSource.FactoryRegistrationSource.#ctor(LightCore.Registration.IRegistrationContainer)">
            <summary>
            Initializes a new instance of <see cref="T:LightCore.Registration.RegistrationSource.FactoryRegistrationSource"/>.
            </summary>
            <param name="registrationContainer">The registration container.</param>
        </member>
        <member name="M:LightCore.Registration.RegistrationSource.FactoryRegistrationSource.GetRegistrationFor(System.Type,LightCore.IContainer)">
            <summary>
            Gets a registration for some contract type.
            </summary>
            <param name="contractType">The contract type.</param>
            <param name="container">The container.</param>
            <returns><value>The registration item</value> if this source can handle it, otherwise <value>null</value>.</returns>
        </member>
        <member name="P:LightCore.Registration.RegistrationSource.FactoryRegistrationSource.SourceSupportsTypeSelector">
            <summary>
            Gets whether the registration source supports a type or not.
            </summary>
        </member>
        <member name="T:LightCore.Registration.RegistrationSource.EnumerableRegistrationSource">
            <summary>
            Represents a registration source for IEnumerable{TContract}, (ResolveAll as dependency) support.
            
            <example>
            public Foo(IEnumerable{IBar} bar) {  }
            </example>
            </summary>
        </member>
        <member name="F:LightCore.Registration.RegistrationSource.EnumerableRegistrationSource._registrationContainer">
            <summary>
            The regisration container.
            </summary>
        </member>
        <member name="M:LightCore.Registration.RegistrationSource.EnumerableRegistrationSource.#ctor(LightCore.Registration.IRegistrationContainer)">
            <summary>
            Initializes a new instance of <see cref="T:LightCore.Registration.RegistrationSource.EnumerableRegistrationSource"/>.
            </summary>
            <param name="registrationContainer">The registration container.</param>
        </member>
        <member name="M:LightCore.Registration.RegistrationSource.EnumerableRegistrationSource.GetRegistrationFor(System.Type,LightCore.IContainer)">
            <summary>
            Gets a registration for some contract type.
            </summary>
            <param name="contractType">The contract type.</param>
            <param name="container">The container.</param>
            <returns><value>The registration item</value> if this source can handle it, otherwise <value>null</value>.</returns>
        </member>
        <member name="M:LightCore.Registration.RegistrationSource.EnumerableRegistrationSource.ResolveEnumerable(System.Type,LightCore.IContainer)">
            <summary>
            Resolves an enumerable type.
            </summary>
            <param name="contractType">The contract type.</param>
            <param name="container">The container.</param>
            <returns>A IEnumerable{TContract} instance with all registered instances.</returns>
        </member>
        <member name="P:LightCore.Registration.RegistrationSource.EnumerableRegistrationSource.SourceSupportsTypeSelector">
            <summary>
            Gets whether the registration source supports a type or not.
            </summary>
        </member>
        <member name="T:LightCore.Registration.RegistrationSource.OpenGenericRegistrationSource">
            <summary>
            Represents a registration source for open generic type support.
            
            <example>
            public Foo(IRepository{Bar} barRepository) {  }
            </example>
            </summary>
        </member>
        <member name="F:LightCore.Registration.RegistrationSource.OpenGenericRegistrationSource._registrationContainer">
            <summary>
            The regisration container.
            </summary>
        </member>
        <member name="M:LightCore.Registration.RegistrationSource.OpenGenericRegistrationSource.#ctor(LightCore.Registration.IRegistrationContainer)">
            <summary>
            Initializes a new instance of <see cref="T:LightCore.Registration.RegistrationSource.OpenGenericRegistrationSource"/>.
            </summary>
            <param name="registrationContainer">The registration container.</param>
        </member>
        <member name="M:LightCore.Registration.RegistrationSource.OpenGenericRegistrationSource.GetRegistrationFor(System.Type,LightCore.IContainer)">
            <summary>
            Gets a registration for some contract type.
            </summary>
            <param name="contractType">The contract type.</param>
            <param name="container">The container.</param>
            <returns><value>The registration item</value> if this source can handle it, otherwise <value>null</value>.</returns>
        </member>
        <member name="M:LightCore.Registration.RegistrationSource.OpenGenericRegistrationSource.IsRegisteredOpenGeneric(System.Type)">
            <summary>
            Checks whether an open generic type, taken from the closed type (contractType) is registered or not.
            (This makes possible to use open generic types and also closed generic types at once.
            </summary>
            <param name="contractType">The type of the contract.</param>
            <returns><value>true</value> if the open generic type is registered, otherwise <value>false</value>.</returns>
        </member>
        <member name="P:LightCore.Registration.RegistrationSource.OpenGenericRegistrationSource.SourceSupportsTypeSelector">
            <summary>
            Gets whether the registration source supports a type or not.
            </summary>
        </member>
        <member name="T:LightCore.Registration.RegistrationSource.ConcreteTypeRegistrationSource">
            <summary>
            Represents an registration source for concrete types.
            
            <example>
            public Foo(Bar bar) {  }
            </example>
            </summary>
        </member>
        <member name="M:LightCore.Registration.RegistrationSource.ConcreteTypeRegistrationSource.GetRegistrationFor(System.Type,LightCore.IContainer)">
            <summary>
            Gets a registration for some contract type.
            </summary>
            <param name="contractType">The contract type.</param>
            <param name="container">The container.</param>
            <returns><value>The registration item</value> if this source can handle it, otherwise <value>null</value>.</returns>
        </member>
        <member name="P:LightCore.Registration.RegistrationSource.ConcreteTypeRegistrationSource.SourceSupportsTypeSelector">
            <summary>
            Gets whether the registration source supports a type or not.
            </summary>
        </member>
    </members>
</doc>
